### Тестирование поиска книг по названию
GET http://book-library-fedyancev.ru:8083/books?title=Мечтают ли андроиды об электроовцах?

> {%
   client.test('Тестирование поиска книги по названию', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 1, "В ответе есть один элемент");
   client.assert(response.body[0]['id'] === 10, "id книги не корректен");
   client.assert(response.body[0]['title'] === "Мечтают ли андроиды об электроовцах?", "название книги не корректно");
   client.assert(response.body[0]['year'] === 1966, "год книги не корректен");
   client.assert(response.body[0]['author'] !== undefined, "нет данных о авторе");
   client.assert(response.body[0]['author']['id'] === 5, "id автора не корректен");
   client.assert(response.body[0]['author']['name'] === "Филип", "имя не корректен");
   client.assert(response.body[0]['author']['surname'] === "Дик", "фамилия не корректен");
   client.assert(response.body[0]['author']['birthday'] === "16.12.1928", "Дата рождения автора не корректен");
   client.assert(response.body[0]['author']['country'] === "us", "страна не корректен");
 });
 %}

### Тестирование ситуации, когда передали некорректное название книги
GET http://book-library-fedyancev.ru:8083/books?title[]=Мечтают ли андроиды об электроовцах?

> {%
     client.test("Тестирование ситуации, когда передали некорректное имя автора для поиска книги", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect book title", "Некорректное сообщение");
     })
 %}

### Тестирование ситуации, когда передали некорректное название книги
GET http://book-library-fedyancev.ru:8083/books?author_surname[]=Дик

> {%
     client.test("Тестирование ситуации, когда передали некорректное имя автора для поиска книги", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect author surname", "Некорректное сообщение");
     })
 %}


### Тестирование поиска книг по фамилии автора
GET http://book-library-fedyancev.ru:8083/books?author_surname=Дик

> {%
 client.test('Тестирование поиска книг по фамилии автора', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 1, "В ответе есть один элемент");
   client.assert(response.body[0]['id'] === 10, "id книги не корректен");
   client.assert(response.body[0]['title'] === "Мечтают ли андроиды об электроовцах?", "название книги не корректно");
   client.assert(response.body[0]['year'] === 1966, "год книги не корректен");
   client.assert(response.body[0]['author'] !== undefined, "нет данных о авторе");
   client.assert(response.body[0]['author']['id'] === 5, "id автора не корректен");
   client.assert(response.body[0]['author']['name'] === "Филип", "имя не корректен");
   client.assert(response.body[0]['author']['surname'] === "Дик", "фамилия не корректен");
   client.assert(response.body[0]['author']['birthday'] === "16.12.1928", "Дата рождения автора не корректен");
   client.assert(response.body[0]['author']['country'] === "us", "страна не корректен");
   })
%}

### Тестирование поиска авторов по фамилии
GET http://book-library-fedyancev.ru:8083/authors?surname=Паланик

> {%
  client.test("Тестирование поиска авторов по фамилии", function () {
      client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
      client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
      client.assert(response.body.hasOwnProperty('length') && response.body.length === 1, "В ответе есть один элемент");
      client.assert(response.body[0]['id'] === 1, "id автора не корректен");
      client.assert(response.body[0]['name'] === "Чак", "имя не корректен");
      client.assert(response.body[0]['surname'] === "Паланик", "фамилия не корректен");
      client.assert(response.body[0]['birthday'] === "21.02.1962", "Дата рождения автора не корректен");
      client.assert(response.body[0]['country'] === "us", "страна не корректен");
  })
%}


### Тестирование неподдерживаемого приложения url
GET http://book-library-fedyancev.ru:8083/hhh?param=ru

> {%
     client.test("Неподдерживаемый запрос", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "unsupported request", "Некорректное сообщение");
     })
 %}

### Тестирование запроса без path
GET http://book-library-fedyancev.ru:8083/?param=ru

> {%
     client.test("Неподдерживаемый запрос", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "unsupported request", "Некорректное сообщение");
     })
 %}

### Тестирование ситуации, когда передали некорректное название книги
GET http://book-library-fedyancev.ru:8083/authors?surname[]=Дик

> {%
     client.test("Тестирование ситуации, когда передали некорректное имя автора для поиска книги", function () {
            client.assert(response.status === 500, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "incorrect author surname", "Некорректное сообщение");
     })
 %}

### Тестирование поиска журнала по названию
GET http://book-library-fedyancev.ru:8083/books?title=Логос

> {%
   client.test('Тестирование поиска журнала по названию', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body.hasOwnProperty('length') && response.body.length === 1, "В ответе есть один элемент");
   client.assert(response.body[0]['id'] === 17, "id журнала не корректен");
   client.assert(response.body[0]['title'] === "Логос", "название журнала не корректно");
   client.assert(response.body[0]['year'] === 2020, "год журнала не корректен");
   client.assert(response.body[0]['author'] == null, "присутствует информация о авторе");
   client.assert(response.body[0]['number'] === 1, "номер не корректен");
 });
 %}


### Тестирование получения печатного изданияя по ID
GET http://book-library-fedyancev.ru:8083/books/17

> {%
   client.test('Тестирование получения печатного изданияя по ID', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body['id'] === 17, "id журнала не корректен");
   client.assert(response.body['title'] === "Логос", "название журнала не корректно");
   client.assert(response.body['year'] === 2020, "год журнала не корректен");
   client.assert(response.body['author'] == null, "присутствует информация о авторе");
   client.assert(response.body['number'] === 1, "номер не корректен");
 });
 %}



### Тестирование ситуации когда указан не существующий id
GET http://book-library-fedyancev.ru:8083/books/0

> {%
     client.test("Тестирование ситуации когда указан не существующий id", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "entity not found", "Некорректное сообщение");
     })
 %}

### Тестирование получения автора по ID
GET http://book-library-fedyancev.ru:8083/authors/1

> {%
  client.test("### Тестирование получения автора по ID", function () {
      client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
      client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
      client.assert(response.body['id'] === 1, "id автора не корректен");
      client.assert(response.body['name'] === "Чак", "имя не корректен");
      client.assert(response.body['surname'] === "Паланик", "фамилия не корректен");
      client.assert(response.body['birthday'] === "21.02.1962", "Дата рождения автора не корректен");
      client.assert(response.body['country'] === "us", "страна не корректен");
  })
%}

### Тестирование ситуации когда указан не существующий id автора
GET http://book-library-fedyancev.ru:8083/authors/0

> {%
     client.test("Тестирование ситуации когда указан не существующий id автора", function () {
            client.assert(response.status === 404, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
            client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
            client.assert(response.body['status'] === "fail", "Некорректный статус");
            client.assert(response.body['message'] === "entity not found", "Некорректное сообщение");
     })
 %}


### Тестирование получения автора по ID
GET http://book-library-fedyancev.ru:8083/authors

### Отправка книг в архив
PUT http://book-library-fedyancev.ru:8083/books/6/moveToArchive

> {%
   client.test('Отправка книг в архив', function () {
   client.assert(response.status === 200, 'Проверяю код ответа. Фактическое знаение: ' + response.status);
   client.assert(response.contentType.mimeType === "application/json", 'Проверяю application/json. Фактическое знаение: ' + response.contentType.mimeType);
   client.assert(response.body['id'] === 6, "id журнала не корректен");
   client.assert(response.body['status'] === "archive", "статус книги не корректен");
   client.assert(response.body['title_for_printing'] === 'Glamorama . Эллис Брет . 1998', "название книги не корректно");
 });
 %}


