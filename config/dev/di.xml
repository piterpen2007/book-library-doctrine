<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"
>
<!--/container/services/service[((@public="false") or not(@public))and not(@class) and not(factory) and not(argument[not(@id) or @id="service_container"])]-->
<!--    //service[argument[not(@id)]]-->

    <imports>
        <import resource="app.config.xml"/>
    </imports>
<services>
    <defaults autowire="true" public="false">
        <bind key="string $pathToFile"
              type="expression">service('EfTech\\BookLibrary\\Config\\AppConfig').getPathToLogFile()
        </bind>
    </defaults>

    <prototype namespace="EfTech\BookLibrary\" resource="./../../src"/>
    <prototype namespace="EfTech\BookLibrary\Infrastructure\"
               resource="./../../vendor/eff-tech/framework/src"
               exclude="./../../vendor/eff-tech/framework/src/{Router,Logger,http,Db}"/>

    <instanceof id="EfTech\BookLibrary\Infrastructure\Controller\ControllerInterface" public="true"/>
    <instanceof id="EfTech\BookLibrary\Infrastructure\Console\CommandInterface" public="true"/>




    <service id="Nyholm\Psr7\Factory\Psr17Factory"/>

    <service id="Psr\Http\Message\UriFactoryInterface" alias="Nyholm\Psr7\Factory\Psr17Factory"/>
    <service id="Psr\Http\Message\ResponseFactoryInterface" alias="Nyholm\Psr7\Factory\Psr17Factory"/>
    <service id="Psr\Http\Message\StreamFactoryInterface" alias="Nyholm\Psr7\Factory\Psr17Factory"/>

    <service
            id="EfTech\BookLibrary\Infrastructure\Console\Output\OutputInterface"
            class="EfTech\BookLibrary\Infrastructure\Console\Output\EchoOutput"
            public="true"
    />

    <service id="EfTech\BookLibrary\Config\AppConfig" public="true">
        <factory class="EfTech\BookLibrary\Config\AppConfig" method="createFromArray"/>
        <argument key="$config">%app.configs%</argument>
    </service>



    <service id="EfTech\BookLibrary\Entity\TextDocumentRepositoryInterface"
             class="EfTech\BookLibrary\Repository\TextDocumentDbRepository">

    </service>
    <service id="EfTech\BookLibrary\Infrastructure\DataLoader\DataLoaderInterface"
             class="EfTech\BookLibrary\Infrastructure\DataLoader\JsonDataLoader"/>

    <service id="EfTech\BookLibrary\Entity\AuthorRepositoryInterface"
             class="EfTech\BookLibrary\Repository\AuthorDbRepository">
    </service>
    <service id="EfTech\BookLibrary\Infrastructure\Auth\HttpAuthProvider">
        <argument key="$loginUri" type="service">
                <service class="Nyholm\Psr7\Uri">
                    <argument key="$uri" type="expression">service('EfTech\\BookLibrary\\Config\\AppConfig').getLoginUri()</argument>
                </service>
        </argument>
    </service>
    <service id="EfTech\BookLibrary\Infrastructure\Auth\UserDataStorageInterface"
             class="EfTech\BookLibrary\Repository\UserDbRepository">
    </service>

    <service id="EfTech\BookLibrary\Infrastructure\Session\SessionInterface">
        <factory class="EfTech\BookLibrary\Infrastructure\Session\SessionNative" method="create"/>
    </service>
    <service id="EfTech\BookLibrary\Infrastructure\View\RenderInterface"
             class="EfTech\BookLibrary\Infrastructure\View\DefaultRender"
             public="true"
    />




</services>
</container>